Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії






ЗВІТ
до практичного завдання № 1
з дисципліни «Аналіз та рефакторинґ коду»
на тему: «Основні рекомендації написання коду для мови програмування Swift»




Виконала
ст. гр. ПЗПІ-23-10
Бєлікова Марина




Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович










Харків 2025
1 ІСТОРІЯ ЗМІН
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	19.10.2025
	0.1
	Створено розділ «Завдання»
	2
	19.10.2025
	0.1
	Створено розділ «Опис Виконаної роботи»
	3
	19.10.2025
	0.1
	Створено розділ «Висновки»
	4
	19.10.2025
	0.1
	Створено розділ «Використані джерела» 
	5
	19.10.2025
	0.1
	Створено розділ «Додаток А»
	6
	19.10.2025
	0.1
	Створено розділ «Додаток Б»
	7
	22.10.2025
	0.1
	Створено розділ «Додаток В»
	


________________
2 ЗАВДАННЯ
Я обрала мову програмування Swift, дослідила основні рекомендації для написання якісного коду у цій мові, продемонструвала ці рекомендації на прикладах коду, обґрунтувала кожну рекомендацію і надала детальні пояснення. Привела приклад гарного і поганого фрагменту коду.
Основні кроки виконання:
1. Вибір мови
Обрана мова: Swift. 
2. Дослідження рекомендацій
   * Стильові правила: форматування, відступи, довжина рядка, розташування дужок.
   * Іменування: типи, змінні та методи, назви файлів.
   * Структура коду: модулі, файли, класи, extension.
   * Коментарі і їх призначення
   * Рефакторинг: виділення методів, уникнення магічних чисел,
   * Тестування та документування 
   * Інструменти аналізу коду. Статичний аналіз коду, форматування коду і CI
   * Приклад гарного і поганого коду.














________________


3 ОПИС ВИКОНАНОЇ РОБОТИ
3.1 Опис правил оформлення програмного коду
3.1.1 Важливість правил
Стандартизація коду важлива для командної розробки.:
      * Єдиний стиль спрощує читання та розуміння коду іншими членами команди.
      * Полегшує onboarding нових розробників — швидка орієнтація у проекті.
      * Мінімізує помилки та баги, підвищує підтримуваність коду.
Переваги дотримання стилю:
      * Покращена читабельність та зрозумілість коду.
      * Однорідність у проекті — легше проводити код-рев’ю.
      * Краща інтеграція інструментів: автоформатери, лінтери.
      * Зниження технічного боргу.
3.1.2 Структура коду та організація проекту
Специфіка для Swift  згідно з Google Swift Style Guide:
      * Усі файли source файлів мають розширення .swift.
      * Назва файлу повинна описувати основну сутність (тип), яку він містить: Якщо файл містить один тип MyType, він повинен називатися MyType.swift.
      * Extension-файли: Якщо файл додає реалізацію протоколу, він має бути названий як MyType+MyProtocol.swift. Наприклад: розширення User для Codable → User+Codable.swift. Якщо файл містить кілька extension-розширень без одного конкретного протоколу, можна використати узагальнену назву: MyType+Additions.swift, MyType+Extensions.swift.
      * Файли з кількома несуміжними деклараціями (utility / helpers): Дайте узагальнену змістовну назву, наприклад: Math.swift, StringUtils.swift, DateHelpers.swift.
      * Тести: Для кожного основного файлу має бути відповідний тестовий файл: MyTypeTests.swift, NetworkClientTests.swift.
Розділяйте код на рівні: модулі/пакети, підмодулі, файли, класи/структури, функції відповідно до принципу Single Responsibility.
3.1.3 Форматування коду
Відступи: стандартно 4 пробіли або 2, якщо узгодила команда, головне послідовність у всьому проекті.
Довжина рядка: 80–120 символів.Розбивайте довгі рядки логічно (наприклад, аргументи у функціях).
Дужки {} у Swift: K&R стиль, на одній лінії з оголошенням. Використання // MARK: для логічного розділення коду на секції.
3.1.4 Іменування змінних, функцій та класів
      * Типи (class, struct, enum, protocol): PascalCase 
      * Змінні, функції, властивості: camelCase
      * Константи: camelCase, але через let.
      * Private властивості: краще не використовувати _, а вказувати private.
      * Уникаємо «магічних чисел», замінюючи їх зрозумілими константами.
3.1.5 Коментарі та документація
Коментарі пояснюють чому, а не що робить код. А документація у Swift — /// або /** ... */ з описом параметрів, повертаємого значення та прикладів використання.
1 /// Обчислює щомісячний платіж.
2 /// - Parameters:
3 /// - principal: сума позики
4 /// - rate: річна процентна ставка
5 /// - Returns: сума платежу за місяць
6 func calculateMonthlyPayment(principal: Double, rate: Double) -> Double {
7 // ...
8 }




3.2 Опис програмних інструментів

3.2.1 Статичний аналіз коду:
SwiftLint, SonarQube, Codacy — виявлення потенційних багів та технічного боргу.
3.2.2 Інструменти форматування та CI/CD:
SwiftFormat для автоматичного форматування коду. Git Hooks для автоматичного запуску форматування перед фіксації змін у репозиторії Git.. CI/CD (GitHub Actions, GitLab CI) — запуск тестів, перевірки стилю та форматування на кожному Pull Request.
3.2.3 Автоматичні перевірки стилю:
Забезпечення неможливості об’єднання PR без проходження всіх перевірок (lint/test/format). Це гарантує стабільний стиль коду та підтримку високої якості проекту.


3.3 Кодування на основі тестування (TDD)


Основи TDD: тест спочатку падає, реалізація мінімального коду, рефакторинг. Тести повинні бути швидкими, ізольованими, повторюваними. Імена тестів — як документація: testLoginWithInvalidPassword_returnsError().


3.4 Приклади програмного коду


Продемонструємо приклади гарного і поганого коду:
1 // Гарний приклад
2 final class AuthService {
3     private let network: NetworkClient
4
5    init(network: NetworkClient) {
6        self.network = network
7    }
8
9    func login(email: String, password: String, completion: @escaping (Result<User, Error>) -> Void) {
10        let request = LoginRequest(email: email, password: password)
11        network.send(request, completion: completion)
12    }
13 }
Чітка відповідальність класу, зрозумілі імена, інверсія залежностей.

1 //Поганий приклад
2 class A {
3    func b(_ x: String) {
4        // ...
5    }
6 }
Невідомі назви, відсутність документації та структури, незрозуміла відповідальність.

________________
4 ВИСНОВКИ
Було розглянуто основні стандарти оформлення коду та принципи організації проекту, включно з логічним поділом на модулі, правильним іменуванням файлів та класів відповідно до рекомендацій Google Swift Style Guide, форматуванням коду, правилами використання відступів і дужок, а також принципами документування і коментування. Також приділено увагу ролі інструментів автоматизації та статичного аналізу, таких як SwiftLint, SwiftFormat і CI/CD, для підтримки єдиного стилю та високої якості коду.
Отримано навички структуризації проекту, створення зрозумілих і лаконічних імен змінних, функцій та констант, а також документування коду так, щоб пояснювати логіку рішень, а не очевидні дії. Засвоєно принципи тестування та TDD, що дозволяють створювати надійний і підтримуваний код, а контроль pull request допомагає команді ефективно співпрацювати та уникати помилок. Стандарти оформлення коду забезпечують читабельність, підтримуваність та якість проєкту, а інструменти автоматизації сприяють підтриманню чистоти та стабільності коду.







________________
5 ВИКОРИСТАНІ ДЖЕРЕЛА
      1. Google Swift Style Guide. — Режим доступу: https://google.github.io/swift/#file-names, вільний. — Дата звернення: 19.10.2025.
      2. Swift API Design Guidelines. — Режим доступу: https://www.swift.org/documentation/api-design-guidelines/, вільний. — Дата звернення: 19.10.2025.
      3. SwiftLint documentation. — Режим доступу: https://swift-lint-docs.readthedocs.io/en/latest/README.html, вільний. — Дата звернення: 19.10.2025.
      4. SwiftFormat documentation / Rokridi. — Режим доступу: https://medium.com/@rokridi/swiftformat-the-ultimate-guide-91041d1ff5c9, вільний. — Дата звернення: 19.10.2025.
      5. Martin, R. C. Clean Code. — Upper Saddle River: Prentice Hall, 2008. — 
464 с. 








________________
ДОДАТОК А
Відеозапис
Відеозапис доповіді: https://www.youtube.com/watch?v=rZ8e0d9YXFg

Хронологічний опис відеозапису:
00:00 - Вступ: Важливість правил оформлення коду
00:24 - Структура коду
01:34 - Форматування коду
02:23 - Іменування (іменування змінних, функцій, класів)
03:05 - Коментарі
03:32 - Документування коду
03:51 - Конвенції стилю кодування для конкретних мов
04:21 - Кодування на основі тестування (Test-Driven Development)
04:43 - Інструменти та автоматизація для підтримки якості коду
06:05 - Приклади оформлення коду: аналіз та обговорення
06:43 - Висновки
07:22 - Використані джерела
________________


ДОДАТОК Б
Слайди презентації
  
Рисунок Б.1 — Важливість правил оформлення коду


  

Рисунок Б.2 — Структура коду




  
Рисунок Б.3 — Форматування коду


  

Рисунок Б.4 — Іменування
________________
  Рисунок Б.5 — Коментарі


  Рисунок Б.6 — Документування коду








  
Рисунок Б.7 — Конвенції стилю кодування для конкретних мов


  

Рисунок Б.8 —  Кодування на основі тестування




  

Рисунок Б.9 —  Інструменти та автоматизація для підтримки якості коду


  

Рисунок Б.10 — Приклади оформлення коду: аналіз та обговорення




  

Рисунок Б.11 — Висновки


  

Рисунок Б.12 — Використані джерела


ДОДАТОК В
Програмний код
В.1 Приклад оформлення програмного коду
GitHub репозиторій: https://github.com/NureBielikovaMaryna/ark-pzpi-23-10-bielikova-maryna/blob/main/Pract1%20/pzpi-23-10-bielikova-maryna-pract1/code-examples-code-conventions.swift
1 // Гарний приклад
2 final class AuthService {
3    private let network: NetworkClient
4
5    init(network: NetworkClient) {
6        self.network = network
7    }
8
9    func login(email: String, password: String, completion: @escaping (Result<User, Error>) -> Void) {
10        let request = LoginRequest(email: email, password: password)
11       network.send(request, completion: completion)
12    }
13 }
14 //Поганий приклад
15 class A {
16    func b(_ x: String) {
17        // ...
18    }
19 }


В.2 Приклад документування програмного коду 
GitHub репозиторій: https://github.com/NureBielikovaMaryna/ark-pzpi-23-10-bielikova-maryna/blob/main/Pract1%20/pzpi-23-10-bielikova-maryna-pract1/code-examples-code-conventions.swift
1 /// Обчислює щомісячний платіж.
2 /// - Parameters:
3 /// - principal: сума позики
4 /// - rate: річна процентна ставка
5 /// - Returns: сума платежу за місяць
6 func calculateMonthlyPayment(principal: Double, rate: Double) -> Double {
7 // ...
8 }
